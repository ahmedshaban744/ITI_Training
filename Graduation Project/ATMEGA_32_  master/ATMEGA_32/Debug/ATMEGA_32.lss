
ATMEGA_32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  00000ace  00000b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800132  00800132  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed3  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce4  00000000  00000000  00002da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001294  00000000  00000000  00003a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00004d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000813  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c8  00000000  00000000  00005a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00006d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_1>
   8:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_2>
   c:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_3>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	e4 02       	muls	r30, r20
  56:	c5 02       	muls	r28, r21
  58:	c5 02       	muls	r28, r21
  5a:	c5 02       	muls	r28, r21
  5c:	c5 02       	muls	r28, r21
  5e:	c5 02       	muls	r28, r21
  60:	c5 02       	muls	r28, r21
  62:	c5 02       	muls	r28, r21
  64:	c5 02       	muls	r28, r21
  66:	e4 02       	muls	r30, r20
  68:	e4 02       	muls	r30, r20
  6a:	c5 02       	muls	r28, r21
  6c:	e4 02       	muls	r30, r20
  6e:	c5 02       	muls	r28, r21
  70:	e4 02       	muls	r30, r20
  72:	e4 02       	muls	r30, r20
  74:	d6 02       	muls	r29, r22
  76:	d6 02       	muls	r29, r22
  78:	d6 02       	muls	r29, r22
  7a:	d6 02       	muls	r29, r22
  7c:	e4 02       	muls	r30, r20
  7e:	e4 02       	muls	r30, r20
  80:	e4 02       	muls	r30, r20
  82:	e4 02       	muls	r30, r20
  84:	c5 02       	muls	r28, r21
  86:	c5 02       	muls	r28, r21
  88:	c5 02       	muls	r28, r21
  8a:	c5 02       	muls	r28, r21
  8c:	e4 02       	muls	r30, r20

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf e5       	ldi	r28, 0x5F	; 95
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e6       	ldi	r26, 0x60	; 96
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ee ec       	ldi	r30, 0xCE	; 206
  a2:	fa e0       	ldi	r31, 0x0A	; 10
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 33       	cpi	r26, 0x32	; 50
  ac:	b1 07       	cpc	r27, r17
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	a2 e3       	ldi	r26, 0x32	; 50
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
  b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
  ba:	a4 33       	cpi	r26, 0x34	; 52
  bc:	b2 07       	cpc	r27, r18
  be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
  c0:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  c4:	0c 94 65 05 	jmp	0xaca	; 0xaca <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <keypad_init>:
 */ 
#include "keypad.h"
int keypad_row[]={R0,R1,R2,R3};
int keypad_colom[]={C0,C1,C2,C3};
keypad_init()
{    keypad_data_direcation &=~(1<<R0) |(1<<R1)|(1<<R2)|(1<<R3);
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	84 bb       	out	0x14, r24	; 20
     keypad_data_direcation |=((1<<C0) |(1<<C1)|(1<<C2)|(1<<C3));
  d2:	84 b3       	in	r24, 0x14	; 20
  d4:	80 6f       	ori	r24, 0xF0	; 240
  d6:	84 bb       	out	0x14, r24	; 20
   
	keypad_port =0xff;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	85 bb       	out	0x15, r24	; 21
  dc:	08 95       	ret

000000de <git_char>:
	
}
char git_char()
{
	for(int i=0 ;i<4;i++)
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	7b c0       	rjmp	.+246    	; 0x1da <git_char+0xfc>
	{
		keypad_port |=((1<<C0) |(1<<C1)|(1<<C2)|(1<<C3));
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	80 6f       	ori	r24, 0xF0	; 240
  e8:	85 bb       	out	0x15, r24	; 21
		keypad_port &=~(1<<keypad_colom[i]);
  ea:	25 b3       	in	r18, 0x15	; 21
  ec:	fb 01       	movw	r30, r22
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	e0 5a       	subi	r30, 0xA0	; 160
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	00 80       	ld	r0, Z
  fc:	02 c0       	rjmp	.+4      	; 0x102 <git_char+0x24>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <git_char+0x20>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	85 bb       	out	0x15, r24	; 21
		for(int j=0 ;j<4;j++)
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	5e c0       	rjmp	.+188    	; 0x1ce <git_char+0xf0>
		{
			if(!(keypad_pin & (1<<keypad_row[j])))
 112:	83 b3       	in	r24, 0x13	; 19
 114:	fa 01       	movw	r30, r20
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e8 59       	subi	r30, 0x98	; 152
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	20 81       	ld	r18, Z
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 2e       	mov	r0, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <git_char+0x4c>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <git_char+0x48>
 12e:	80 fd       	sbrc	r24, 0
 130:	4c c0       	rjmp	.+152    	; 0x1ca <git_char+0xec>
			{
				while(!(keypad_pin&(1<<keypad_row[j])));
 132:	83 b3       	in	r24, 0x13	; 19
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <git_char+0x60>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <git_char+0x5c>
 142:	80 ff       	sbrs	r24, 0
 144:	f6 cf       	rjmp	.-20     	; 0x132 <git_char+0x54>
				switch(i)
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	71 05       	cpc	r23, r1
 14a:	c9 f0       	breq	.+50     	; 0x17e <git_char+0xa0>
 14c:	24 f4       	brge	.+8      	; 0x156 <git_char+0x78>
 14e:	61 15       	cp	r22, r1
 150:	71 05       	cpc	r23, r1
 152:	41 f0       	breq	.+16     	; 0x164 <git_char+0x86>
 154:	3a c0       	rjmp	.+116    	; 0x1ca <git_char+0xec>
 156:	62 30       	cpi	r22, 0x02	; 2
 158:	71 05       	cpc	r23, r1
 15a:	f1 f0       	breq	.+60     	; 0x198 <git_char+0xba>
 15c:	63 30       	cpi	r22, 0x03	; 3
 15e:	71 05       	cpc	r23, r1
 160:	41 f1       	breq	.+80     	; 0x1b2 <git_char+0xd4>
 162:	33 c0       	rjmp	.+102    	; 0x1ca <git_char+0xec>
				{
					case(0):
					{
							if(j==0)     return '7';
 164:	41 15       	cp	r20, r1
 166:	51 05       	cpc	r21, r1
 168:	f1 f1       	breq	.+124    	; 0x1e6 <git_char+0x108>
							else if(j==1)return '4';
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	51 05       	cpc	r21, r1
 16e:	e9 f1       	breq	.+122    	; 0x1ea <git_char+0x10c>
							else if(j==2)return '1';
 170:	42 30       	cpi	r20, 0x02	; 2
 172:	51 05       	cpc	r21, r1
 174:	e1 f1       	breq	.+120    	; 0x1ee <git_char+0x110>
							else if(j==3)return '!';
 176:	43 30       	cpi	r20, 0x03	; 3
 178:	51 05       	cpc	r21, r1
 17a:	39 f5       	brne	.+78     	; 0x1ca <git_char+0xec>
 17c:	3a c0       	rjmp	.+116    	; 0x1f2 <git_char+0x114>
							break;
					}
					
						case(1):
					{
						     if(j==0)return '8';
 17e:	41 15       	cp	r20, r1
 180:	51 05       	cpc	r21, r1
 182:	c9 f1       	breq	.+114    	; 0x1f6 <git_char+0x118>
							 else if(j==1)return '5';
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	51 05       	cpc	r21, r1
 188:	c1 f1       	breq	.+112    	; 0x1fa <git_char+0x11c>
							 else if(j==2)return '2';
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	51 05       	cpc	r21, r1
 18e:	b9 f1       	breq	.+110    	; 0x1fe <git_char+0x120>
							 else if(j==3)return '0';
 190:	43 30       	cpi	r20, 0x03	; 3
 192:	51 05       	cpc	r21, r1
 194:	d1 f4       	brne	.+52     	; 0x1ca <git_char+0xec>
 196:	35 c0       	rjmp	.+106    	; 0x202 <git_char+0x124>
							break;
							}
					case(2):
					{
							if(j==0)return '9';
 198:	41 15       	cp	r20, r1
 19a:	51 05       	cpc	r21, r1
 19c:	a1 f1       	breq	.+104    	; 0x206 <git_char+0x128>
					     	else if(j==1)return '6';
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	51 05       	cpc	r21, r1
 1a2:	99 f1       	breq	.+102    	; 0x20a <git_char+0x12c>
							else if(j==2)return '3';
 1a4:	42 30       	cpi	r20, 0x02	; 2
 1a6:	51 05       	cpc	r21, r1
 1a8:	91 f1       	breq	.+100    	; 0x20e <git_char+0x130>
							else if(j==3)return '=';
 1aa:	43 30       	cpi	r20, 0x03	; 3
 1ac:	51 05       	cpc	r21, r1
 1ae:	69 f4       	brne	.+26     	; 0x1ca <git_char+0xec>
 1b0:	30 c0       	rjmp	.+96     	; 0x212 <git_char+0x134>
						 	break;
							}
					case(3):
							{
					     	if(j==0)return '/';
 1b2:	41 15       	cp	r20, r1
 1b4:	51 05       	cpc	r21, r1
 1b6:	79 f1       	breq	.+94     	; 0x216 <git_char+0x138>
							else if(j==1)return '*';
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	51 05       	cpc	r21, r1
 1bc:	71 f1       	breq	.+92     	; 0x21a <git_char+0x13c>
							else if(j==2)return '-';
 1be:	42 30       	cpi	r20, 0x02	; 2
 1c0:	51 05       	cpc	r21, r1
 1c2:	69 f1       	breq	.+90     	; 0x21e <git_char+0x140>
							else if(j==3)return '+';
 1c4:	43 30       	cpi	r20, 0x03	; 3
 1c6:	51 05       	cpc	r21, r1
 1c8:	61 f1       	breq	.+88     	; 0x222 <git_char+0x144>
{
	for(int i=0 ;i<4;i++)
	{
		keypad_port |=((1<<C0) |(1<<C1)|(1<<C2)|(1<<C3));
		keypad_port &=~(1<<keypad_colom[i]);
		for(int j=0 ;j<4;j++)
 1ca:	4f 5f       	subi	r20, 0xFF	; 255
 1cc:	5f 4f       	sbci	r21, 0xFF	; 255
 1ce:	44 30       	cpi	r20, 0x04	; 4
 1d0:	51 05       	cpc	r21, r1
 1d2:	0c f4       	brge	.+2      	; 0x1d6 <git_char+0xf8>
 1d4:	9e cf       	rjmp	.-196    	; 0x112 <git_char+0x34>
	keypad_port =0xff;
	
}
char git_char()
{
	for(int i=0 ;i<4;i++)
 1d6:	6f 5f       	subi	r22, 0xFF	; 255
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	64 30       	cpi	r22, 0x04	; 4
 1dc:	71 05       	cpc	r23, r1
 1de:	0c f4       	brge	.+2      	; 0x1e2 <git_char+0x104>
 1e0:	81 cf       	rjmp	.-254    	; 0xe4 <git_char+0x6>
			}
		
	    }
	
	 }
	return 'N';
 1e2:	8e e4       	ldi	r24, 0x4E	; 78
 1e4:	08 95       	ret
				while(!(keypad_pin&(1<<keypad_row[j])));
				switch(i)
				{
					case(0):
					{
							if(j==0)     return '7';
 1e6:	87 e3       	ldi	r24, 0x37	; 55
 1e8:	08 95       	ret
							else if(j==1)return '4';
 1ea:	84 e3       	ldi	r24, 0x34	; 52
 1ec:	08 95       	ret
							else if(j==2)return '1';
 1ee:	81 e3       	ldi	r24, 0x31	; 49
 1f0:	08 95       	ret
							else if(j==3)return '!';
 1f2:	81 e2       	ldi	r24, 0x21	; 33
 1f4:	08 95       	ret
							break;
					}
					
						case(1):
					{
						     if(j==0)return '8';
 1f6:	88 e3       	ldi	r24, 0x38	; 56
 1f8:	08 95       	ret
							 else if(j==1)return '5';
 1fa:	85 e3       	ldi	r24, 0x35	; 53
 1fc:	08 95       	ret
							 else if(j==2)return '2';
 1fe:	82 e3       	ldi	r24, 0x32	; 50
 200:	08 95       	ret
							 else if(j==3)return '0';
 202:	80 e3       	ldi	r24, 0x30	; 48
 204:	08 95       	ret
							break;
							}
					case(2):
					{
							if(j==0)return '9';
 206:	89 e3       	ldi	r24, 0x39	; 57
 208:	08 95       	ret
					     	else if(j==1)return '6';
 20a:	86 e3       	ldi	r24, 0x36	; 54
 20c:	08 95       	ret
							else if(j==2)return '3';
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	08 95       	ret
							else if(j==3)return '=';
 212:	8d e3       	ldi	r24, 0x3D	; 61
 214:	08 95       	ret
						 	break;
							}
					case(3):
							{
					     	if(j==0)return '/';
 216:	8f e2       	ldi	r24, 0x2F	; 47
 218:	08 95       	ret
							else if(j==1)return '*';
 21a:	8a e2       	ldi	r24, 0x2A	; 42
 21c:	08 95       	ret
							else if(j==2)return '-';
 21e:	8d e2       	ldi	r24, 0x2D	; 45
 220:	08 95       	ret
							else if(j==3)return '+';
 222:	8b e2       	ldi	r24, 0x2B	; 43
	    }
	
	 }
	return 'N';

}
 224:	08 95       	ret

00000226 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
 226:	88 b3       	in	r24, 0x18	; 24
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	83 ed       	ldi	r24, 0xD3	; 211
 22e:	90 e3       	ldi	r25, 0x30	; 48
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_lcd_kick+0xa>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_lcd_kick+0x10>
 236:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	08 95       	ret

00000240 <LCD_check_lcd_isbusy>:
			count = 0;
		}
	}
}
void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<shift);
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
 246:	88 b3       	in	r24, 0x18	; 24
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 252:	0e 94 13 01 	call	0x226	; 0x226 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<4);
 256:	8a b3       	in	r24, 0x1a	; 26
 258:	80 6f       	ori	r24, 0xF0	; 240
 25a:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
 25c:	88 b3       	in	r24, 0x18	; 24
 25e:	8b 7f       	andi	r24, 0xFB	; 251
 260:	88 bb       	out	0x18, r24	; 24
 262:	08 95       	ret

00000264 <LCD_WRITE_COMMAND>:
void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}
void LCD_WRITE_COMMAND(unsigned char command){
 264:	cf 93       	push	r28
 266:	c8 2f       	mov	r28, r24
	//LCD_check_lcd_isbusy();
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 268:	0e 94 20 01 	call	0x240	; 0x240 <LCD_check_lcd_isbusy>
	LCD_PORT = command; // put the command  at port-A
 26c:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));  //  make portB select command and at read mode
 26e:	88 b3       	in	r24, 0x18	; 24
 270:	83 7f       	andi	r24, 0xF3	; 243
 272:	88 bb       	out	0x18, r24	; 24
 274:	89 ef       	ldi	r24, 0xF9	; 249
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_WRITE_COMMAND+0x14>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_WRITE_COMMAND+0x1a>
 27e:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 280:	0e 94 13 01 	call	0x226	; 0x226 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
}
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <LCD_GOTO_XY>:
 */


#include "lcd.h"

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	c8 2f       	mov	r28, r24
 28e:	d6 2f       	mov	r29, r22
	if (line == 1)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	31 f4       	brne	.+12     	; 0x2a0 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 294:	60 31       	cpi	r22, 0x10	; 16
 296:	20 f4       	brcc	.+8      	; 0x2a0 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	86 0f       	add	r24, r22
 29c:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 2a0:	c2 30       	cpi	r28, 0x02	; 2
 2a2:	31 f4       	brne	.+12     	; 0x2b0 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 2a4:	d0 31       	cpi	r29, 0x10	; 16
 2a6:	20 f4       	brcc	.+8      	; 0x2b0 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 2a8:	80 ec       	ldi	r24, 0xC0	; 192
 2aa:	8d 0f       	add	r24, r29
 2ac:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
		}
	}
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCD_clear_screen>:
		LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
		LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
 2bc:	08 95       	ret

000002be <LCD_INIT>:
 2be:	87 e8       	ldi	r24, 0x87	; 135
 2c0:	93 e1       	ldi	r25, 0x13	; 19
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_INIT+0x4>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_INIT+0xa>
 2c8:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(20);

	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH); // DDRB   (enable the register , send data , read mode)
 2ca:	87 b3       	in	r24, 0x17	; 23
 2cc:	8e 60       	ori	r24, 0x0E	; 14
 2ce:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);      // PORTB   (disable the register  , send command , write mode)
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	81 7f       	andi	r24, 0xF1	; 241
 2d4:	88 bb       	out	0x18, r24	; 24
	
	DataDir_LCD_PORT = 0xFF;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	8a bb       	out	0x1a, r24	; 26
 2da:	85 ea       	ldi	r24, 0xA5	; 165
 2dc:	9e e0       	ldi	r25, 0x0E	; 14
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_INIT+0x20>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_INIT+0x26>
 2e4:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen(); 
 2e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 2ea:	88 e3       	ldi	r24, 0x38	; 56
 2ec:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	//LCD_WRITE_COMMAND(0x02);
	
	#endif
		LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 2fc:	8f e0       	ldi	r24, 0x0F	; 15
 2fe:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WRITE_COMMAND>
 302:	08 95       	ret

00000304 <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
}
void LCD_WRITE_CHAR(unsigned char character){
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 308:	0e 94 20 01 	call	0x240	; 0x240 <LCD_check_lcd_isbusy>
	LCD_PORT = character;
 30c:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1 << RW_SWITCH);
 30e:	88 b3       	in	r24, 0x18	; 24
 310:	8b 7f       	andi	r24, 0xFB	; 251
 312:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL |= (1 << RS_SWITCH);
 314:	88 b3       	in	r24, 0x18	; 24
 316:	88 60       	ori	r24, 0x08	; 8
 318:	88 bb       	out	0x18, r24	; 24
 31a:	89 ef       	ldi	r24, 0xF9	; 249
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_WRITE_CHAR+0x1a>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_WRITE_CHAR+0x20>
 324:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 326:	0e 94 13 01 	call	0x226	; 0x226 <LCD_lcd_kick>
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	_delay_ms(1);
	LCD_lcd_kick ();
	#endif
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	8c 01       	movw	r16, r24
	int count = 0;
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 33c:	18 c0       	rjmp	.+48     	; 0x36e <LCD_WRITE_STRING+0x40>
		count++;
 33e:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 340:	0f 5f       	subi	r16, 0xFF	; 255
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	0e 94 82 01 	call	0x304	; 0x304 <LCD_WRITE_CHAR>
		if (count == 16)
 348:	c0 31       	cpi	r28, 0x10	; 16
 34a:	d1 05       	cpc	r29, r1
 34c:	29 f4       	brne	.+10     	; 0x358 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
 356:	0b c0       	rjmp	.+22     	; 0x36e <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 358:	c0 32       	cpi	r28, 0x20	; 32
 35a:	d1 05       	cpc	r29, r1
 35c:	41 f4       	brne	.+16     	; 0x36e <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 35e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
			count = 0;
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_WRITE_STRING(char* string)
{
	int count = 0;
	while (*string > 0){
 36e:	f8 01       	movw	r30, r16
 370:	80 81       	ld	r24, Z
 372:	81 11       	cpse	r24, r1
 374:	e4 cf       	rjmp	.-56     	; 0x33e <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <checkPassword>:

//===================================================================================================
//=======================================program======================================================
//===================================================================================================
char correctPassword[PASSWORD_LENGTH] = "1234";
bool checkPassword(char* enteredPassword) {
 380:	bc 01       	movw	r22, r24
	for (int i = 0; i < PASSWORD_LENGTH; i++) {
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	0c c0       	rjmp	.+24     	; 0x3a0 <checkPassword+0x20>
		if (enteredPassword[i] != correctPassword[i]) {
 388:	fb 01       	movw	r30, r22
 38a:	e2 0f       	add	r30, r18
 38c:	f3 1f       	adc	r31, r19
 38e:	40 81       	ld	r20, Z
 390:	f9 01       	movw	r30, r18
 392:	e0 59       	subi	r30, 0x90	; 144
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	90 81       	ld	r25, Z
 398:	49 13       	cpse	r20, r25
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <checkPassword+0x2a>
//===================================================================================================
//=======================================program======================================================
//===================================================================================================
char correctPassword[PASSWORD_LENGTH] = "1234";
bool checkPassword(char* enteredPassword) {
	for (int i = 0; i < PASSWORD_LENGTH; i++) {
 39c:	2f 5f       	subi	r18, 0xFF	; 255
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	24 30       	cpi	r18, 0x04	; 4
 3a2:	31 05       	cpc	r19, r1
 3a4:	8c f3       	brlt	.-30     	; 0x388 <checkPassword+0x8>
		if (enteredPassword[i] != correctPassword[i]) {
			return false; // Password mismatch
		}
	}
	return true; // Password is correct
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	08 95       	ret
//===================================================================================================
char correctPassword[PASSWORD_LENGTH] = "1234";
bool checkPassword(char* enteredPassword) {
	for (int i = 0; i < PASSWORD_LENGTH; i++) {
		if (enteredPassword[i] != correctPassword[i]) {
			return false; // Password mismatch
 3aa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true; // Password is correct
}
 3ac:	08 95       	ret

000003ae <displayMessage>:

void displayMessage(char* message) {
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	LCD_clear_screen();
 3b4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
	LCD_GOTO_XY(1, 0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
	LCD_WRITE_STRING(message);
 3c0:	ce 01       	movw	r24, r28
 3c2:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 3c6:	2f e7       	ldi	r18, 0x7F	; 127
 3c8:	8a e1       	ldi	r24, 0x1A	; 26
 3ca:	96 e0       	ldi	r25, 0x06	; 6
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <displayMessage+0x1e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <displayMessage+0x28>
 3d6:	00 00       	nop
	_delay_ms(2000);  // Display the message for 2 seconds
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <main>:

int main() {
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	2f 97       	sbiw	r28, 0x0f	; 15
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61

    char enteredPassword[PASSWORD_LENGTH + 1];  // +1 for null-terminator
    uint8_t attempts = 0;

    LCD_INIT();
 3f2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_INIT>
    keypad_init();
 3f6:	0e 94 66 00 	call	0xcc	; 0xcc <keypad_init>
}

int main() {

    char enteredPassword[PASSWORD_LENGTH + 1];  // +1 for null-terminator
    uint8_t attempts = 0;
 3fa:	00 e0       	ldi	r16, 0x00	; 0

    LCD_INIT();
    keypad_init();

    while (1) {
        LCD_clear_screen();
 3fc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
        LCD_GOTO_XY(1, 0);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
        LCD_WRITE_STRING("Enter PASSWORD..");
 408:	84 e7       	ldi	r24, 0x74	; 116
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>

        for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	15 c0       	rjmp	.+42     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
            char key = 'N';
            while (key == 'N') {
                key = git_char();
 414:	0e 94 6f 00 	call	0xde	; 0xde <git_char>
 418:	01 c0       	rjmp	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	8e e4       	ldi	r24, 0x4E	; 78
        LCD_GOTO_XY(1, 0);
        LCD_WRITE_STRING("Enter PASSWORD..");

        for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
            char key = 'N';
            while (key == 'N') {
 41c:	8e 34       	cpi	r24, 0x4E	; 78
 41e:	d1 f3       	breq	.-12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
                key = git_char();
            }
            enteredPassword[i] = key;
 420:	e1 e0       	ldi	r30, 0x01	; 1
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	ec 0f       	add	r30, r28
 426:	fd 1f       	adc	r31, r29
 428:	e1 0f       	add	r30, r17
 42a:	f1 1d       	adc	r31, r1
 42c:	80 83       	st	Z, r24
            LCD_GOTO_XY(2, i);
 42e:	61 2f       	mov	r22, r17
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
            LCD_WRITE_CHAR('*');
 436:	8a e2       	ldi	r24, 0x2A	; 42
 438:	0e 94 82 01 	call	0x304	; 0x304 <LCD_WRITE_CHAR>
    while (1) {
        LCD_clear_screen();
        LCD_GOTO_XY(1, 0);
        LCD_WRITE_STRING("Enter PASSWORD..");

        for (uint8_t i = 0; i < PASSWORD_LENGTH; i++) {
 43c:	1f 5f       	subi	r17, 0xFF	; 255
 43e:	14 30       	cpi	r17, 0x04	; 4
 440:	60 f3       	brcs	.-40     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
            }
            enteredPassword[i] = key;
            LCD_GOTO_XY(2, i);
            LCD_WRITE_CHAR('*');
        }
        enteredPassword[PASSWORD_LENGTH] = '\0';  // Null-terminate the entered password
 442:	1d 82       	std	Y+5, r1	; 0x05

        if (checkPassword(enteredPassword)) {
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	0e 94 c0 01 	call	0x380	; 0x380 <checkPassword>
 44c:	88 23       	and	r24, r24
 44e:	09 f4       	brne	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	5e c0       	rjmp	.+188    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
            displayMessage("RIGH PASSWORD");
 452:	85 e8       	ldi	r24, 0x85	; 133
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 d7 01 	call	0x3ae	; 0x3ae <displayMessage>
			MCAL_DIO_PIN_Dir(DIO_PORTD,PD7,DIO_pin_OUT);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	67 e0       	ldi	r22, 0x07	; 7
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			MCAL_DIO_PIN_val(DIO_PORTD,PD7,DIO_pin_HIGH);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	67 e0       	ldi	r22, 0x07	; 7
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCAL_DIO_PIN_val>
    }
	 //==============================================================================================================================================
	 //==============================================================SPI CONFIG======================================================================
	 //==============================================================================================================================================	
	 SPI_config SPI_config;
	 SPI_config.clock_rate=SPI_boud_rate_prescaler4;
 46e:	1b 86       	std	Y+11, r1	; 0x0b
	 SPI_config.Clock_phase=SPI_samling_on_last_edge;
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	8a 87       	std	Y+10, r24	; 0x0a
	 SPI_config.Clock_Polarity=SPI_clock_high_idel;
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	89 87       	std	Y+9, r24	; 0x09
	 SPI_config.data_order=SPI_DARA_ORDER_MSB;
 478:	1f 82       	std	Y+7, r1	; 0x07
	 SPI_config.SPI_MODE=SPI_MASTER;
 47a:	80 e1       	ldi	r24, 0x10	; 16
 47c:	8e 83       	std	Y+6, r24	; 0x06
	 SPI_config.interrupt_enable=SPI_interrupt_disable;
 47e:	18 86       	std	Y+8, r1	; 0x08
	 SPI_config.interrupt_callback=NULL;
 480:	1e 86       	std	Y+14, r1	; 0x0e
 482:	1d 86       	std	Y+13, r1	; 0x0d
	 MCAL_SPI_INIT(&SPI_config);
 484:	ce 01       	movw	r24, r28
 486:	06 96       	adiw	r24, 0x06	; 6
 488:	0e 94 de 04 	call	0x9bc	; 0x9bc <MCAL_SPI_INIT>
	 MCAL_SPI_DIO_SET_PINS(&SPI_config);
 48c:	ce 01       	movw	r24, r28
 48e:	06 96       	adiw	r24, 0x06	; 6
 490:	0e 94 09 05 	call	0xa12	; 0xa12 <MCAL_SPI_DIO_SET_PINS>
//==============================================================================================================================================
//==============================================================EXTI ============================================================================
//==============================================================================================================================================
	  MCAL_EXTI_0_ENABLE(low_level_of_INT0);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 44 04 	call	0x888	; 0x888 <MCAL_EXTI_0_ENABLE>
	  MCAL_EXTI_1_ENABLE(Any_logical_change_on_INT1);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 11 04 	call	0x822	; 0x822 <MCAL_EXTI_1_ENABLE>
//==============================================================================================================================================
//==============================================================UART INIT ======================================================================
//==============================================================================================================================================
	  UART_INIT();
 4a0:	0e 94 39 05 	call	0xa72	; 0xa72 <UART_INIT>
	  uint8_t data1;	 
	   	   
	LCD_clear_screen();
 4a4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
	LCD_GOTO_XY(1,0);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
    LCD_WRITE_STRING("welcome to my        home");
 4b0:	83 e9       	ldi	r24, 0x93	; 147
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 4b8:	2f e7       	ldi	r18, 0x7F	; 127
 4ba:	84 e8       	ldi	r24, 0x84	; 132
 4bc:	9e e1       	ldi	r25, 0x1E	; 30
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c8:	00 00       	nop
	_delay_ms(10000);
	LCD_clear_screen();
 4ca:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
    LCD_WRITE_STRING("Choose ROME TO      Control");
 4ce:	8d ea       	ldi	r24, 0xAD	; 173
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 4d6:	2f e3       	ldi	r18, 0x3F	; 63
 4d8:	87 e7       	ldi	r24, 0x77	; 119
 4da:	9b e1       	ldi	r25, 0x1B	; 27
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e6:	00 00       	nop
	_delay_ms(9000);
	LCD_clear_screen();	
 4e8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
 LCD_WRITE_STRING("1:ROME1  2:ROME2");
 4ec:	89 ec       	ldi	r24, 0xC9	; 201
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 LCD_GOTO_XY(2,0);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
 LCD_WRITE_STRING("3:ROME3  4:ROME4");
 4fc:	8a ed       	ldi	r24, 0xDA	; 218
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 LCD_GOTO_XY(1,0);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GOTO_XY>
 50c:	3e c0       	rjmp	.+124    	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
            displayMessage("RIGH PASSWORD");
			MCAL_DIO_PIN_Dir(DIO_PORTD,PD7,DIO_pin_OUT);
			MCAL_DIO_PIN_val(DIO_PORTD,PD7,DIO_pin_HIGH);
            break;  // Correct password, exit the loop
        } else {
            attempts++;
 50e:	0f 5f       	subi	r16, 0xFF	; 255

            if (attempts >= MAX_PASSWORD_ATTEMPTS) {
 510:	03 30       	cpi	r16, 0x03	; 3
 512:	b0 f1       	brcs	.+108    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
                displayMessage("Too many try");
 514:	8b ee       	ldi	r24, 0xEB	; 235
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 d7 01 	call	0x3ae	; 0x3ae <displayMessage>
				{
				MCAL_DIO_PIN_Dir(DIO_PORTB,PB0,DIO_pin_OUT);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
				MCAL_DIO_PIN_Dir(DIO_PORTD,PD6,DIO_pin_OUT);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	66 e0       	ldi	r22, 0x06	; 6
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
				MCAL_DIO_PIN_val(DIO_PORTD,PD6,DIO_pin_HIGH);
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	66 e0       	ldi	r22, 0x06	; 6
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCAL_DIO_PIN_val>
				for(int i=0 ;i<30;i++)
 53a:	00 e0       	ldi	r16, 0x00	; 0
 53c:	10 e0       	ldi	r17, 0x00	; 0
 53e:	1b c0       	rjmp	.+54     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
				{	
			   MCAL_DIO_PIN_val(DIO_PORTB,PB0,DIO_pin_HIGH);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCAL_DIO_PIN_val>
 54a:	2f e9       	ldi	r18, 0x9F	; 159
 54c:	86 e8       	ldi	r24, 0x86	; 134
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 558:	00 c0       	rjmp	.+0      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 55a:	00 00       	nop
				_delay_ms(500);
				MCAL_DIO_PIN_val(DIO_PORTB,PB0,DIO_pin_LOW);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCAL_DIO_PIN_val>
 566:	8f e4       	ldi	r24, 0x4F	; 79
 568:	93 ec       	ldi	r25, 0xC3	; 195
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 570:	00 00       	nop
                displayMessage("Too many try");
				{
				MCAL_DIO_PIN_Dir(DIO_PORTB,PB0,DIO_pin_OUT);
				MCAL_DIO_PIN_Dir(DIO_PORTD,PD6,DIO_pin_OUT);
				MCAL_DIO_PIN_val(DIO_PORTD,PD6,DIO_pin_HIGH);
				for(int i=0 ;i<30;i++)
 572:	0f 5f       	subi	r16, 0xFF	; 255
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	0e 31       	cpi	r16, 0x1E	; 30
 578:	11 05       	cpc	r17, r1
 57a:	14 f3       	brlt	.-60     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
				_delay_ms(500);
				MCAL_DIO_PIN_val(DIO_PORTB,PB0,DIO_pin_LOW);
				_delay_ms(200);
				}
            
                attempts = 0;  
 57c:	00 e0       	ldi	r16, 0x00	; 0
 57e:	3e cf       	rjmp	.-388    	; 0x3fc <main+0x1e>
				}
            } else {
                displayMessage("wrong password  try again");
 580:	88 ef       	ldi	r24, 0xF8	; 248
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 d7 01 	call	0x3ae	; 0x3ae <displayMessage>
 588:	39 cf       	rjmp	.-398    	; 0x3fc <main+0x1e>
 LCD_GOTO_XY(1,0);
    while (1) {
     //==============================================================================================================================================
     //==============================================================UART============================================================================
     //==============================================================================================================================================
     data1=UART_RESIVED();
 58a:	0e 94 5b 05 	call	0xab6	; 0xab6 <UART_RESIVED>
 58e:	8f 87       	std	Y+15, r24	; 0x0f
     UART_SEND_char(data1);
 590:	0e 94 57 05 	call	0xaae	; 0xaae <UART_SEND_char>
	 switch(data1)
 594:	ef 85       	ldd	r30, Y+15	; 0x0f
 596:	8e 2f       	mov	r24, r30
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	fc 01       	movw	r30, r24
 59c:	b1 97       	sbiw	r30, 0x21	; 33
 59e:	ed 31       	cpi	r30, 0x1D	; 29
 5a0:	f1 05       	cpc	r31, r1
 5a2:	98 f7       	brcc	.-26     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 5a4:	e6 5d       	subi	r30, 0xD6	; 214
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__tablejump2__>
	case '1':
	case '2':	 
	case '3':
	case '4':
	    {
		 LCD_clear_screen();
 5ac:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
		 LCD_WRITE_STRING("IN ROME ");
 5b0:	82 e1       	ldi	r24, 0x12	; 18
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
		 LCD_WRITE_CHAR(data1);
 5b8:	8f 85       	ldd	r24, Y+15	; 0x0f
 5ba:	0e 94 82 01 	call	0x304	; 0x304 <LCD_WRITE_CHAR>
		 	  //==============================================================================================================================================
		 	  //==============================================================SPI ============================================================================
		 	  //==============================================================================================================================================
		  MCAL_SPI_SEND(&data1);
 5be:	ce 01       	movw	r24, r28
 5c0:	0f 96       	adiw	r24, 0x0f	; 15
 5c2:	0e 94 03 05 	call	0xa06	; 0xa06 <MCAL_SPI_SEND>
		 break ;
 5c6:	e1 cf       	rjmp	.-62     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
		case '*':
		case '/':
		case '=':
		case '!':	
	{	
		 LCD_clear_screen();
 5c8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_screen>
		LCD_WRITE_STRING("that option not valid ");
 5cc:	8b e1       	ldi	r24, 0x1B	; 27
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 5d4:	da cf       	rjmp	.-76     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>

000005d6 <MCAL_DIO_PORT_Dir>:
	case DIO_PORTB : return GET_BIT(PORTB,pin_num); break;
	case DIO_PORTC : return GET_BIT(PORTC,pin_num); break;
	case DIO_PORTD : return GET_BIT(PORTD,pin_num); break;
	
}
}
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	41 f0       	breq	.+16     	; 0x5ea <MCAL_DIO_PORT_Dir+0x14>
 5da:	28 f0       	brcs	.+10     	; 0x5e6 <MCAL_DIO_PORT_Dir+0x10>
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	39 f0       	breq	.+14     	; 0x5ee <MCAL_DIO_PORT_Dir+0x18>
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	39 f0       	breq	.+14     	; 0x5f2 <MCAL_DIO_PORT_Dir+0x1c>
 5e4:	08 95       	ret
 5e6:	6a bb       	out	0x1a, r22	; 26
 5e8:	08 95       	ret
 5ea:	67 bb       	out	0x17, r22	; 23
 5ec:	08 95       	ret
 5ee:	64 bb       	out	0x14, r22	; 20
 5f0:	08 95       	ret
 5f2:	61 bb       	out	0x11, r22	; 17
 5f4:	08 95       	ret

000005f6 <MCAL_DIO_PIN_Dir>:
 5f6:	44 23       	and	r20, r20
 5f8:	b9 f1       	breq	.+110    	; 0x668 <MCAL_DIO_PIN_Dir+0x72>
 5fa:	41 30       	cpi	r20, 0x01	; 1
 5fc:	09 f0       	breq	.+2      	; 0x600 <MCAL_DIO_PIN_Dir+0xa>
 5fe:	6b c0       	rjmp	.+214    	; 0x6d6 <MCAL_DIO_PIN_Dir+0xe0>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	89 f0       	breq	.+34     	; 0x626 <MCAL_DIO_PIN_Dir+0x30>
 604:	28 f0       	brcs	.+10     	; 0x610 <MCAL_DIO_PIN_Dir+0x1a>
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	c9 f0       	breq	.+50     	; 0x63c <MCAL_DIO_PIN_Dir+0x46>
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	11 f1       	breq	.+68     	; 0x652 <MCAL_DIO_PIN_Dir+0x5c>
 60e:	08 95       	ret
 610:	2a b3       	in	r18, 0x1a	; 26
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <MCAL_DIO_PIN_Dir+0x26>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <MCAL_DIO_PIN_Dir+0x22>
 620:	82 2b       	or	r24, r18
 622:	8a bb       	out	0x1a, r24	; 26
 624:	08 95       	ret
 626:	27 b3       	in	r18, 0x17	; 23
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <MCAL_DIO_PIN_Dir+0x3c>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <MCAL_DIO_PIN_Dir+0x38>
 636:	82 2b       	or	r24, r18
 638:	87 bb       	out	0x17, r24	; 23
 63a:	08 95       	ret
 63c:	24 b3       	in	r18, 0x14	; 20
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <MCAL_DIO_PIN_Dir+0x52>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <MCAL_DIO_PIN_Dir+0x4e>
 64c:	82 2b       	or	r24, r18
 64e:	84 bb       	out	0x14, r24	; 20
 650:	08 95       	ret
 652:	21 b3       	in	r18, 0x11	; 17
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <MCAL_DIO_PIN_Dir+0x68>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <MCAL_DIO_PIN_Dir+0x64>
 662:	82 2b       	or	r24, r18
 664:	81 bb       	out	0x11, r24	; 17
 666:	08 95       	ret
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	91 f0       	breq	.+36     	; 0x690 <MCAL_DIO_PIN_Dir+0x9a>
 66c:	28 f0       	brcs	.+10     	; 0x678 <MCAL_DIO_PIN_Dir+0x82>
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	d9 f0       	breq	.+54     	; 0x6a8 <MCAL_DIO_PIN_Dir+0xb2>
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	29 f1       	breq	.+74     	; 0x6c0 <MCAL_DIO_PIN_Dir+0xca>
 676:	08 95       	ret
 678:	2a b3       	in	r18, 0x1a	; 26
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <MCAL_DIO_PIN_Dir+0x8e>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <MCAL_DIO_PIN_Dir+0x8a>
 688:	80 95       	com	r24
 68a:	82 23       	and	r24, r18
 68c:	8a bb       	out	0x1a, r24	; 26
 68e:	08 95       	ret
 690:	27 b3       	in	r18, 0x17	; 23
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <MCAL_DIO_PIN_Dir+0xa6>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <MCAL_DIO_PIN_Dir+0xa2>
 6a0:	80 95       	com	r24
 6a2:	82 23       	and	r24, r18
 6a4:	87 bb       	out	0x17, r24	; 23
 6a6:	08 95       	ret
 6a8:	24 b3       	in	r18, 0x14	; 20
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <MCAL_DIO_PIN_Dir+0xbe>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <MCAL_DIO_PIN_Dir+0xba>
 6b8:	80 95       	com	r24
 6ba:	82 23       	and	r24, r18
 6bc:	84 bb       	out	0x14, r24	; 20
 6be:	08 95       	ret
 6c0:	21 b3       	in	r18, 0x11	; 17
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <MCAL_DIO_PIN_Dir+0xd6>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <MCAL_DIO_PIN_Dir+0xd2>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	81 bb       	out	0x11, r24	; 17
 6d6:	08 95       	ret

000006d8 <MCAL_DIO_PIN_val>:
 6d8:	44 23       	and	r20, r20
 6da:	b9 f1       	breq	.+110    	; 0x74a <MCAL_DIO_PIN_val+0x72>
 6dc:	41 30       	cpi	r20, 0x01	; 1
 6de:	09 f0       	breq	.+2      	; 0x6e2 <MCAL_DIO_PIN_val+0xa>
 6e0:	6b c0       	rjmp	.+214    	; 0x7b8 <MCAL_DIO_PIN_val+0xe0>
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	89 f0       	breq	.+34     	; 0x708 <MCAL_DIO_PIN_val+0x30>
 6e6:	28 f0       	brcs	.+10     	; 0x6f2 <MCAL_DIO_PIN_val+0x1a>
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	c9 f0       	breq	.+50     	; 0x71e <MCAL_DIO_PIN_val+0x46>
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	11 f1       	breq	.+68     	; 0x734 <MCAL_DIO_PIN_val+0x5c>
 6f0:	08 95       	ret
 6f2:	2b b3       	in	r18, 0x1b	; 27
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <MCAL_DIO_PIN_val+0x26>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <MCAL_DIO_PIN_val+0x22>
 702:	82 2b       	or	r24, r18
 704:	8b bb       	out	0x1b, r24	; 27
 706:	08 95       	ret
 708:	28 b3       	in	r18, 0x18	; 24
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <MCAL_DIO_PIN_val+0x3c>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <MCAL_DIO_PIN_val+0x38>
 718:	82 2b       	or	r24, r18
 71a:	88 bb       	out	0x18, r24	; 24
 71c:	08 95       	ret
 71e:	25 b3       	in	r18, 0x15	; 21
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <MCAL_DIO_PIN_val+0x52>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <MCAL_DIO_PIN_val+0x4e>
 72e:	82 2b       	or	r24, r18
 730:	85 bb       	out	0x15, r24	; 21
 732:	08 95       	ret
 734:	22 b3       	in	r18, 0x12	; 18
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <MCAL_DIO_PIN_val+0x68>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <MCAL_DIO_PIN_val+0x64>
 744:	82 2b       	or	r24, r18
 746:	82 bb       	out	0x12, r24	; 18
 748:	08 95       	ret
 74a:	81 30       	cpi	r24, 0x01	; 1
 74c:	91 f0       	breq	.+36     	; 0x772 <MCAL_DIO_PIN_val+0x9a>
 74e:	28 f0       	brcs	.+10     	; 0x75a <MCAL_DIO_PIN_val+0x82>
 750:	82 30       	cpi	r24, 0x02	; 2
 752:	d9 f0       	breq	.+54     	; 0x78a <MCAL_DIO_PIN_val+0xb2>
 754:	83 30       	cpi	r24, 0x03	; 3
 756:	29 f1       	breq	.+74     	; 0x7a2 <MCAL_DIO_PIN_val+0xca>
 758:	08 95       	ret
 75a:	2b b3       	in	r18, 0x1b	; 27
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <MCAL_DIO_PIN_val+0x8e>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <MCAL_DIO_PIN_val+0x8a>
 76a:	80 95       	com	r24
 76c:	82 23       	and	r24, r18
 76e:	8b bb       	out	0x1b, r24	; 27
 770:	08 95       	ret
 772:	28 b3       	in	r18, 0x18	; 24
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <MCAL_DIO_PIN_val+0xa6>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	6a 95       	dec	r22
 780:	e2 f7       	brpl	.-8      	; 0x77a <MCAL_DIO_PIN_val+0xa2>
 782:	80 95       	com	r24
 784:	82 23       	and	r24, r18
 786:	88 bb       	out	0x18, r24	; 24
 788:	08 95       	ret
 78a:	25 b3       	in	r18, 0x15	; 21
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <MCAL_DIO_PIN_val+0xbe>
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	6a 95       	dec	r22
 798:	e2 f7       	brpl	.-8      	; 0x792 <MCAL_DIO_PIN_val+0xba>
 79a:	80 95       	com	r24
 79c:	82 23       	and	r24, r18
 79e:	85 bb       	out	0x15, r24	; 21
 7a0:	08 95       	ret
 7a2:	22 b3       	in	r18, 0x12	; 18
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <MCAL_DIO_PIN_val+0xd6>
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <MCAL_DIO_PIN_val+0xd2>
 7b2:	80 95       	com	r24
 7b4:	82 23       	and	r24, r18
 7b6:	82 bb       	out	0x12, r24	; 18
 7b8:	08 95       	ret

000007ba <MCAL_DIO_PIN_PULL_UP>:
void MCAL_DIO_PIN_PULL_UP(uint8_t port_num , uint8_t pin_num)
{
		switch(port_num)
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	89 f0       	breq	.+34     	; 0x7e0 <MCAL_DIO_PIN_PULL_UP+0x26>
 7be:	28 f0       	brcs	.+10     	; 0x7ca <MCAL_DIO_PIN_PULL_UP+0x10>
 7c0:	82 30       	cpi	r24, 0x02	; 2
 7c2:	c9 f0       	breq	.+50     	; 0x7f6 <MCAL_DIO_PIN_PULL_UP+0x3c>
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	11 f1       	breq	.+68     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7c8:	08 95       	ret
		{
		case DIO_PORTA: SET_BIT(PORTA ,pin_num); break;
 7ca:	2b b3       	in	r18, 0x1b	; 27
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <MCAL_DIO_PIN_PULL_UP+0x1c>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <MCAL_DIO_PIN_PULL_UP+0x18>
 7da:	82 2b       	or	r24, r18
 7dc:	8b bb       	out	0x1b, r24	; 27
 7de:	08 95       	ret
		case DIO_PORTB: SET_BIT(PORTB ,pin_num); break;
 7e0:	28 b3       	in	r18, 0x18	; 24
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <MCAL_DIO_PIN_PULL_UP+0x32>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	6a 95       	dec	r22
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <MCAL_DIO_PIN_PULL_UP+0x2e>
 7f0:	82 2b       	or	r24, r18
 7f2:	88 bb       	out	0x18, r24	; 24
 7f4:	08 95       	ret
		case DIO_PORTC: SET_BIT(PORTC ,pin_num); break;
 7f6:	25 b3       	in	r18, 0x15	; 21
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	6a 95       	dec	r22
 804:	e2 f7       	brpl	.-8      	; 0x7fe <MCAL_DIO_PIN_PULL_UP+0x44>
 806:	82 2b       	or	r24, r18
 808:	85 bb       	out	0x15, r24	; 21
 80a:	08 95       	ret
		case DIO_PORTD: SET_BIT(PORTD ,pin_num); break;
 80c:	22 b3       	in	r18, 0x12	; 18
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	6a 95       	dec	r22
 81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 81c:	82 2b       	or	r24, r18
 81e:	82 bb       	out	0x12, r24	; 18
 820:	08 95       	ret

00000822 <MCAL_EXTI_1_ENABLE>:
	}
	//enable the interrput in EXTI peripherals
	SET_BIT(GICR,5);	
	//pin configuer
			  MCAL_DIO_PIN_PULL_UP(DIO_PORTB,PD2);
			  MCAL_DIO_PIN_Dir(DIO_PORTB,PD2,DIO_pin_INT);
 822:	9f b7       	in	r25, 0x3f	; 63
 824:	90 68       	ori	r25, 0x80	; 128
 826:	9f bf       	out	0x3f, r25	; 63
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	69 f0       	breq	.+26     	; 0x846 <MCAL_EXTI_1_ENABLE+0x24>
 82c:	28 f0       	brcs	.+10     	; 0x838 <MCAL_EXTI_1_ENABLE+0x16>
 82e:	82 30       	cpi	r24, 0x02	; 2
 830:	89 f0       	breq	.+34     	; 0x854 <MCAL_EXTI_1_ENABLE+0x32>
 832:	83 30       	cpi	r24, 0x03	; 3
 834:	b1 f0       	breq	.+44     	; 0x862 <__stack+0x3>
 836:	1b c0       	rjmp	.+54     	; 0x86e <__stack+0xf>
 838:	85 b7       	in	r24, 0x35	; 53
 83a:	8b 7f       	andi	r24, 0xFB	; 251
 83c:	85 bf       	out	0x35, r24	; 53
 83e:	85 b7       	in	r24, 0x35	; 53
 840:	87 7f       	andi	r24, 0xF7	; 247
 842:	85 bf       	out	0x35, r24	; 53
 844:	14 c0       	rjmp	.+40     	; 0x86e <__stack+0xf>
 846:	85 b7       	in	r24, 0x35	; 53
 848:	87 7f       	andi	r24, 0xF7	; 247
 84a:	85 bf       	out	0x35, r24	; 53
 84c:	85 b7       	in	r24, 0x35	; 53
 84e:	84 60       	ori	r24, 0x04	; 4
 850:	85 bf       	out	0x35, r24	; 53
 852:	0d c0       	rjmp	.+26     	; 0x86e <__stack+0xf>
 854:	85 b7       	in	r24, 0x35	; 53
 856:	88 60       	ori	r24, 0x08	; 8
 858:	85 bf       	out	0x35, r24	; 53
 85a:	85 b7       	in	r24, 0x35	; 53
 85c:	8b 7f       	andi	r24, 0xFB	; 251
 85e:	85 bf       	out	0x35, r24	; 53
 860:	06 c0       	rjmp	.+12     	; 0x86e <__stack+0xf>
 862:	85 b7       	in	r24, 0x35	; 53
 864:	84 60       	ori	r24, 0x04	; 4
 866:	85 bf       	out	0x35, r24	; 53
 868:	85 b7       	in	r24, 0x35	; 53
 86a:	88 60       	ori	r24, 0x08	; 8
 86c:	85 bf       	out	0x35, r24	; 53
 86e:	8b b7       	in	r24, 0x3b	; 59
 870:	80 68       	ori	r24, 0x80	; 128
 872:	8b bf       	out	0x3b, r24	; 59
 874:	63 e0       	ldi	r22, 0x03	; 3
 876:	83 e0       	ldi	r24, 0x03	; 3
 878:	0e 94 dd 03 	call	0x7ba	; 0x7ba <MCAL_DIO_PIN_PULL_UP>
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	63 e0       	ldi	r22, 0x03	; 3
 880:	83 e0       	ldi	r24, 0x03	; 3
 882:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
 886:	08 95       	ret

00000888 <MCAL_EXTI_0_ENABLE>:
 888:	9f b7       	in	r25, 0x3f	; 63
 88a:	90 68       	ori	r25, 0x80	; 128
 88c:	9f bf       	out	0x3f, r25	; 63
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	69 f0       	breq	.+26     	; 0x8ac <MCAL_EXTI_0_ENABLE+0x24>
 892:	28 f0       	brcs	.+10     	; 0x89e <MCAL_EXTI_0_ENABLE+0x16>
 894:	82 30       	cpi	r24, 0x02	; 2
 896:	89 f0       	breq	.+34     	; 0x8ba <MCAL_EXTI_0_ENABLE+0x32>
 898:	83 30       	cpi	r24, 0x03	; 3
 89a:	b1 f0       	breq	.+44     	; 0x8c8 <MCAL_EXTI_0_ENABLE+0x40>
 89c:	1b c0       	rjmp	.+54     	; 0x8d4 <MCAL_EXTI_0_ENABLE+0x4c>
 89e:	85 b7       	in	r24, 0x35	; 53
 8a0:	8b 7f       	andi	r24, 0xFB	; 251
 8a2:	85 bf       	out	0x35, r24	; 53
 8a4:	85 b7       	in	r24, 0x35	; 53
 8a6:	87 7f       	andi	r24, 0xF7	; 247
 8a8:	85 bf       	out	0x35, r24	; 53
 8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <MCAL_EXTI_0_ENABLE+0x4c>
 8ac:	85 b7       	in	r24, 0x35	; 53
 8ae:	87 7f       	andi	r24, 0xF7	; 247
 8b0:	85 bf       	out	0x35, r24	; 53
 8b2:	85 b7       	in	r24, 0x35	; 53
 8b4:	84 60       	ori	r24, 0x04	; 4
 8b6:	85 bf       	out	0x35, r24	; 53
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <MCAL_EXTI_0_ENABLE+0x4c>
 8ba:	85 b7       	in	r24, 0x35	; 53
 8bc:	88 60       	ori	r24, 0x08	; 8
 8be:	85 bf       	out	0x35, r24	; 53
 8c0:	85 b7       	in	r24, 0x35	; 53
 8c2:	8b 7f       	andi	r24, 0xFB	; 251
 8c4:	85 bf       	out	0x35, r24	; 53
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <MCAL_EXTI_0_ENABLE+0x4c>
 8c8:	85 b7       	in	r24, 0x35	; 53
 8ca:	84 60       	ori	r24, 0x04	; 4
 8cc:	85 bf       	out	0x35, r24	; 53
 8ce:	85 b7       	in	r24, 0x35	; 53
 8d0:	88 60       	ori	r24, 0x08	; 8
 8d2:	85 bf       	out	0x35, r24	; 53
 8d4:	8b b7       	in	r24, 0x3b	; 59
 8d6:	80 64       	ori	r24, 0x40	; 64
 8d8:	8b bf       	out	0x3b, r24	; 59
 8da:	62 e0       	ldi	r22, 0x02	; 2
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	0e 94 dd 03 	call	0x7ba	; 0x7ba <MCAL_DIO_PIN_PULL_UP>
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	62 e0       	ldi	r22, 0x02	; 2
 8e6:	83 e0       	ldi	r24, 0x03	; 3
 8e8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
 8ec:	08 95       	ret

000008ee <__vector_1>:
}


//ISR
ISR(INT0_vect)
{     MCAL_DIO_PIN_PULL_UP(DIO_PORTD,PD2);
 8ee:	1f 92       	push	r1
 8f0:	0f 92       	push	r0
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	0f 92       	push	r0
 8f6:	11 24       	eor	r1, r1
 8f8:	2f 93       	push	r18
 8fa:	3f 93       	push	r19
 8fc:	4f 93       	push	r20
 8fe:	5f 93       	push	r21
 900:	6f 93       	push	r22
 902:	7f 93       	push	r23
 904:	8f 93       	push	r24
 906:	9f 93       	push	r25
 908:	af 93       	push	r26
 90a:	bf 93       	push	r27
 90c:	ef 93       	push	r30
 90e:	ff 93       	push	r31
 910:	62 e0       	ldi	r22, 0x02	; 2
 912:	83 e0       	ldi	r24, 0x03	; 3
 914:	0e 94 dd 03 	call	0x7ba	; 0x7ba <MCAL_DIO_PIN_PULL_UP>
	 MCAL_DIO_PIN_val(DIO_PORTD,PD6,DIO_pin_LOW);
 918:	40 e0       	ldi	r20, 0x00	; 0
 91a:	66 e0       	ldi	r22, 0x06	; 6
 91c:	83 e0       	ldi	r24, 0x03	; 3
 91e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCAL_DIO_PIN_val>
	 
}
 922:	ff 91       	pop	r31
 924:	ef 91       	pop	r30
 926:	bf 91       	pop	r27
 928:	af 91       	pop	r26
 92a:	9f 91       	pop	r25
 92c:	8f 91       	pop	r24
 92e:	7f 91       	pop	r23
 930:	6f 91       	pop	r22
 932:	5f 91       	pop	r21
 934:	4f 91       	pop	r20
 936:	3f 91       	pop	r19
 938:	2f 91       	pop	r18
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_3>:

ISR(INT2_vect)
{
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1


}
 94e:	0f 90       	pop	r0
 950:	0f be       	out	0x3f, r0	; 63
 952:	0f 90       	pop	r0
 954:	1f 90       	pop	r1
 956:	18 95       	reti

00000958 <__vector_2>:
ISR(INT1_vect)
{	MCAL_DIO_PORT_Dir(DIO_PORTA ,DIO_PORT_INT);
 958:	1f 92       	push	r1
 95a:	0f 92       	push	r0
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	0f 92       	push	r0
 960:	11 24       	eor	r1, r1
 962:	2f 93       	push	r18
 964:	3f 93       	push	r19
 966:	4f 93       	push	r20
 968:	5f 93       	push	r21
 96a:	6f 93       	push	r22
 96c:	7f 93       	push	r23
 96e:	8f 93       	push	r24
 970:	9f 93       	push	r25
 972:	af 93       	push	r26
 974:	bf 93       	push	r27
 976:	ef 93       	push	r30
 978:	ff 93       	push	r31
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MCAL_DIO_PORT_Dir>
	MCAL_DIO_PORT_Dir(DIO_PORTB ,DIO_PORT_INT);
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MCAL_DIO_PORT_Dir>
	MCAL_DIO_PORT_Dir(DIO_PORTC ,DIO_PORT_INT);
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	82 e0       	ldi	r24, 0x02	; 2
 98e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MCAL_DIO_PORT_Dir>
	MCAL_DIO_PORT_Dir(DIO_PORTD ,DIO_PORT_INT);
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	83 e0       	ldi	r24, 0x03	; 3
 996:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MCAL_DIO_PORT_Dir>
 
}
 99a:	ff 91       	pop	r31
 99c:	ef 91       	pop	r30
 99e:	bf 91       	pop	r27
 9a0:	af 91       	pop	r26
 9a2:	9f 91       	pop	r25
 9a4:	8f 91       	pop	r24
 9a6:	7f 91       	pop	r23
 9a8:	6f 91       	pop	r22
 9aa:	5f 91       	pop	r21
 9ac:	4f 91       	pop	r20
 9ae:	3f 91       	pop	r19
 9b0:	2f 91       	pop	r18
 9b2:	0f 90       	pop	r0
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	0f 90       	pop	r0
 9b8:	1f 90       	pop	r1
 9ba:	18 95       	reti

000009bc <MCAL_SPI_INIT>:
{
	
		while(!((SPSR>>SPIF)&1));
		SPDR=*buffer;
	   while(!((SPSR>>SPIF)&1));
    	*buffer=SPDR;
 9bc:	fc 01       	movw	r30, r24
 9be:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__bss_end+0x1>
 9c2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__bss_end>
 9c6:	9d b1       	in	r25, 0x0d	; 13
 9c8:	82 81       	ldd	r24, Z+2	; 0x02
 9ca:	89 2b       	or	r24, r25
 9cc:	8d b9       	out	0x0d, r24	; 13
 9ce:	9d b1       	in	r25, 0x0d	; 13
 9d0:	81 81       	ldd	r24, Z+1	; 0x01
 9d2:	89 2b       	or	r24, r25
 9d4:	8d b9       	out	0x0d, r24	; 13
 9d6:	9d b1       	in	r25, 0x0d	; 13
 9d8:	80 81       	ld	r24, Z
 9da:	89 2b       	or	r24, r25
 9dc:	8d b9       	out	0x0d, r24	; 13
 9de:	9d b1       	in	r25, 0x0d	; 13
 9e0:	83 81       	ldd	r24, Z+3	; 0x03
 9e2:	89 2b       	or	r24, r25
 9e4:	8d b9       	out	0x0d, r24	; 13
 9e6:	9d b1       	in	r25, 0x0d	; 13
 9e8:	84 81       	ldd	r24, Z+4	; 0x04
 9ea:	89 2b       	or	r24, r25
 9ec:	8d b9       	out	0x0d, r24	; 13
 9ee:	9d b1       	in	r25, 0x0d	; 13
 9f0:	85 81       	ldd	r24, Z+5	; 0x05
 9f2:	89 2b       	or	r24, r25
 9f4:	8d b9       	out	0x0d, r24	; 13
 9f6:	9e b1       	in	r25, 0x0e	; 14
 9f8:	86 81       	ldd	r24, Z+6	; 0x06
 9fa:	89 2b       	or	r24, r25
 9fc:	8e b9       	out	0x0e, r24	; 14
 9fe:	8d b1       	in	r24, 0x0d	; 13
 a00:	80 64       	ori	r24, 0x40	; 64
 a02:	8d b9       	out	0x0d, r24	; 13
 a04:	08 95       	ret

00000a06 <MCAL_SPI_SEND>:
 a06:	fc 01       	movw	r30, r24
 a08:	80 81       	ld	r24, Z
 a0a:	8f b9       	out	0x0f, r24	; 15
 a0c:	77 9b       	sbis	0x0e, 7	; 14
 a0e:	fe cf       	rjmp	.-4      	; 0xa0c <MCAL_SPI_SEND+0x6>
 a10:	08 95       	ret

00000a12 <MCAL_SPI_DIO_SET_PINS>:
	
}
void MCAL_SPI_DIO_SET_PINS(SPI_config *SPI_define)
{
	
		if(SPI_define->SPI_MODE==SPI_MASTER)
 a12:	fc 01       	movw	r30, r24
 a14:	80 81       	ld	r24, Z
 a16:	80 31       	cpi	r24, 0x10	; 16
 a18:	a9 f4       	brne	.+42     	; 0xa44 <MCAL_SPI_DIO_SET_PINS+0x32>
		{
			//SPI_SS -> PB4
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB4,DIO_pin_OUT);
 a1a:	41 e0       	ldi	r20, 0x01	; 1
 a1c:	64 e0       	ldi	r22, 0x04	; 4
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			//SPI_MOSI -> PB5
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB5,DIO_pin_OUT);
 a24:	41 e0       	ldi	r20, 0x01	; 1
 a26:	65 e0       	ldi	r22, 0x05	; 5
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			//SPI_MISO -> PB6
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB6,DIO_pin_INT);
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	66 e0       	ldi	r22, 0x06	; 6
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			//SPI_SCK -> PB7
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB7,DIO_pin_OUT);
 a38:	41 e0       	ldi	r20, 0x01	; 1
 a3a:	67 e0       	ldi	r22, 0x07	; 7
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
 a42:	08 95       	ret
			
		}
		else if(SPI_define->SPI_MODE==SPI_SLAVE)
 a44:	81 11       	cpse	r24, r1
 a46:	14 c0       	rjmp	.+40     	; 0xa70 <MCAL_SPI_DIO_SET_PINS+0x5e>
		{
			//SPI_SS -> PB4
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB4,DIO_pin_INT);
 a48:	40 e0       	ldi	r20, 0x00	; 0
 a4a:	64 e0       	ldi	r22, 0x04	; 4
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			//SPI_MOSI -> PB5
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB5,DIO_pin_INT);
 a52:	40 e0       	ldi	r20, 0x00	; 0
 a54:	65 e0       	ldi	r22, 0x05	; 5
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			//SPI_MISO -> PB6
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB6,DIO_pin_OUT);
 a5c:	41 e0       	ldi	r20, 0x01	; 1
 a5e:	66 e0       	ldi	r22, 0x06	; 6
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
			//SPI_SCK -> PB7
			MCAL_DIO_PIN_Dir(DIO_PORTB,PB7,DIO_pin_INT);
 a66:	40 e0       	ldi	r20, 0x00	; 0
 a68:	67 e0       	ldi	r22, 0x07	; 7
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <MCAL_DIO_PIN_Dir>
 a70:	08 95       	ret

00000a72 <UART_INIT>:
	
	
	

//init boud rate
CLR_BIT(UCSRA,U2X);
 a72:	8b b1       	in	r24, 0x0b	; 11
 a74:	8d 7f       	andi	r24, 0xFD	; 253
 a76:	8b b9       	out	0x0b, r24	; 11
UBRRL=51;
 a78:	83 e3       	ldi	r24, 0x33	; 51
 a7a:	89 b9       	out	0x09, r24	; 9
	
//init tx and rx
SET_BIT(UCSRB,RXEN)	;
 a7c:	8a b1       	in	r24, 0x0a	; 10
 a7e:	80 61       	ori	r24, 0x10	; 16
 a80:	8a b9       	out	0x0a, r24	; 10
SET_BIT(UCSRB,TXEN);
 a82:	8a b1       	in	r24, 0x0a	; 10
 a84:	88 60       	ori	r24, 0x08	; 8
 a86:	8a b9       	out	0x0a, r24	; 10
//init fram

    //parity bit	

	#ifdef  Even_Parity
	CLR_BIT(UCSRC,UPM0);
 a88:	80 b5       	in	r24, 0x20	; 32
 a8a:	8f 7e       	andi	r24, 0xEF	; 239
 a8c:	80 bd       	out	0x20, r24	; 32
	SET_BIT( UCSRC,UPM1);
 a8e:	80 b5       	in	r24, 0x20	; 32
 a90:	80 62       	ori	r24, 0x20	; 32
 a92:	80 bd       	out	0x20, r24	; 32
//stop bit
   #ifdef  one_stop_bit
   CLR_BIT(UCSRC,USBS);
    #endif
 #ifdef two_stop_bit
 SET_BIT(UCSRC,USBS);  
 a94:	80 b5       	in	r24, 0x20	; 32
 a96:	88 60       	ori	r24, 0x08	; 8
 a98:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRB,UCSZ2);

	break;
   case 8:

				SET_BIT(UCSRC,UCSZ0);
 a9a:	80 b5       	in	r24, 0x20	; 32
 a9c:	82 60       	ori	r24, 0x02	; 2
 a9e:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ1);
 aa0:	80 b5       	in	r24, 0x20	; 32
 aa2:	84 60       	ori	r24, 0x04	; 4
 aa4:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRB,UCSZ2);
 aa6:	8a b1       	in	r24, 0x0a	; 10
 aa8:	8b 7f       	andi	r24, 0xFB	; 251
 aaa:	8a b9       	out	0x0a, r24	; 10
 aac:	08 95       	ret

00000aae <UART_SEND_char>:

}
void UART_SEND_char(uint8_t data)
{
//check if the buffer is empety or not
while(! GET_BIT(UCSRA,UDRE));
 aae:	5d 9b       	sbis	0x0b, 5	; 11
 ab0:	fe cf       	rjmp	.-4      	; 0xaae <UART_SEND_char>
UDR=data;
 ab2:	8c b9       	out	0x0c, r24	; 12
 ab4:	08 95       	ret

00000ab6 <UART_RESIVED>:
	
}

uint8_t UART_RESIVED (void)
{
while(! GET_BIT(UCSRA,RXC));
 ab6:	5f 9b       	sbis	0x0b, 7	; 11
 ab8:	fe cf       	rjmp	.-4      	; 0xab6 <UART_RESIVED>

return UDR;
 aba:	8c b1       	in	r24, 0x0c	; 12
	
}
 abc:	08 95       	ret

00000abe <__tablejump2__>:
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	05 90       	lpm	r0, Z+
 ac4:	f4 91       	lpm	r31, Z
 ac6:	e0 2d       	mov	r30, r0
 ac8:	09 94       	ijmp

00000aca <_exit>:
 aca:	f8 94       	cli

00000acc <__stop_program>:
 acc:	ff cf       	rjmp	.-2      	; 0xacc <__stop_program>
